{"version":3,"sources":["components/header.js","components/footer.js","reduxStore/reducers/categoryReducer.js","components/categories.js","reduxStore/reducers/shoppingCart.js","components/products.js","components/simpleCart.js","App.js","reduxStore/reducers/productReducer.js","reduxStore/index.js","index.js"],"names":["connect","state","shoppingcart","shoppingCart","props","Paper","className","elevation","IconButton","Badge","badgeContent","cart","length","color","Footer","href","initialState","categories","name","displayName","description","activeCategory","categoryReducer","action","type","payload","mapDispatchToProps","activate","category","Tabs","textColor","indicatorColor","map","idx","Tab","label","onClick","includes","console","log","newCart","filter","item","addToCart","products","productReducer","activeProducts","Card","variant","raised","inventory","Button","removeFromCart","App","price","filteredProducts","product","reducers","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.280924ab.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\nimport { IconButton, Badge, Paper } from \"@mui/material\";\nimport ShoppingCartOutlinedIcon from \"@mui/icons-material/ShoppingCartOutlined\";\n\nfunction Header(props) {\n  return (\n    <Paper className=\"header\" elevation={2}>\n      Best Store Ever\n      <IconButton aria-label=\"cart\">\n        <Badge badgeContent={props.shoppingcart.cart.length} color=\"primary\">\n          <ShoppingCartOutlinedIcon />\n        </Badge>\n      </IconButton>\n    </Paper>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  shoppingcart: state.shoppingCart,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import { BsGithub, BsLinkedin } from \"react-icons/bs\";\n\nfunction Footer() {\n  return (\n    <footer>\n      &copy; 2021 {\"    \"}\n      <a href=\"https://github.com/Twin-2\">\n        <BsGithub />\n      </a>\n      {\"    \"}\n      <a href=\"https://www.linkedin.com/in/david-whitmore-501273160/\">\n        <BsLinkedin />\n      </a>\n    </footer>\n  );\n}\n\nexport default Footer;\n","let initialState = {\n  categories: [\n    {\n      name: \"Food\",\n      displayName: \"Foods\",\n      description: \"all thingd edible\",\n    },\n    {\n      name: \"Clothes\",\n      displayName: \"Clothing\",\n      description: \"Cover yourself!\",\n    },\n    {\n      name: \"Games\",\n      displayName: \"Fun and Games\",\n      description: \"All types of games for all types of players\",\n    },\n  ],\n  activeCategory: \"Food\",\n};\n\n// a reducer is a pure function that is meant to eval an action type\nconst categoryReducer = (state = initialState, action) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case \"ACTIVATE_CATEGORY\":\n      //direct manipulation. change.\n      return { ...state, activeCategory: payload };\n    default:\n      return state;\n  }\n};\n\n// an action creator is a function that RETURNS an ACTION\nexport const activate = (category) => {\n  // action is an object literal with a type and a payload (optional)\n  return {\n    type: \"ACTIVATE_CATEGORY\",\n    payload: category,\n  };\n};\n\nexport default categoryReducer;\n","import { connect } from \"react-redux\";\nimport { activate } from \"../reduxStore/reducers/categoryReducer\";\nimport { Tabs, Tab } from \"@mui/material\";\n\nfunction Categories(props) {\n  return (\n    <section>\n      <h1>Product Categories</h1>\n      <Tabs textColor=\"primary\" indicatorColor=\"primary\">\n        {props.categories.categories.map((category, idx) => (\n          <Tab\n            label={category.name}\n            onClick={() => props.activate(category.name)}\n          />\n        ))}\n      </Tabs>\n    </section>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  categories: state.categoryReducer,\n});\n\nconst mapDispatchToProps = { activate };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Categories);\n","let initialState = {\n  cart: [],\n};\n\n// a reducer is a pure function that is meant to eval an action type\nconst shoppingCart = (state = initialState, action) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case \"ADD_TO_CART\":\n      if (state.cart.includes(payload)) {\n        return state;\n      } else {\n        return { ...state, cart: [...state.cart, payload] };\n      }\n    case \"REMOVE_FROM_CART\":\n      console.log(payload);\n      let newCart = state.cart.filter((item) => item !== payload);\n      return { ...state, cart: newCart };\n    default:\n      return state;\n  }\n};\n\n// an action creator is a function that RETURNS an ACTION\nexport const addToCart = (item) => {\n  // action is an object literal with a type and a payload (optional)\n  return {\n    type: \"ADD_TO_CART\",\n    payload: item,\n  };\n};\n\nexport const removeFromCart = (item) => {\n  // action is an object literal with a type and a payload (optional)\n  return {\n    type: \"REMOVE_FROM_CART\",\n    payload: item,\n  };\n};\n\nexport default shoppingCart;\n","import { connect } from \"react-redux\";\nimport { addToCart } from \"../reduxStore/reducers/shoppingCart\";\nimport { Button, Card } from \"@mui/material\";\n\nfunction Products(props) {\n  function addToCart(item) {\n    if (!props.shoppingCart.cart.includes(item)) {\n      props.addToCart(item);\n    }\n  }\n\n  return (\n    <main>\n      <h1>{props.category.activeCategory} </h1>\n      <div className=\"products\">\n        {props.products.activeProducts.map((item, idx) => (\n          <Card className=\"card\" variant=\"outlined\" raised={true} key={idx}>\n            {item.name}: {item.description}\n            <br />\n            In Stock: {item.inventory}\n            <br />\n            <Button\n              variant=\"contained\"\n              color=\"success\"\n              onClick={() => addToCart(item)}\n            >\n              Add to cart\n            </Button>\n          </Card>\n        ))}\n      </div>\n    </main>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  products: state.productReducer,\n  category: state.categoryReducer,\n  shoppingCart: state.shoppingCart,\n});\n\nconst mapDispatchToProps = { addToCart };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Products);\n","import { connect } from \"react-redux\";\nimport { removeFromCart } from \"../reduxStore/reducers/shoppingCart\";\nimport HighlightOffIcon from \"@mui/icons-material/HighlightOff\";\n\nfunction SimpleCart(props) {\n  return (\n    <div className=\"simpleCart\">\n      {props.shoppingCart.cart.map((item, idx) => (\n        <div key={idx}>\n          {/* {console.log(item)} */}\n          <span>{item.name}</span>\n          <HighlightOffIcon onClick={() => props.removeFromCart(item)} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  shoppingCart: state.shoppingCart,\n});\n\nconst mapDispatchToProps = { removeFromCart };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SimpleCart);\n","import Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport Categories from \"./components/categories\";\nimport Products from \"./components/products\";\nimport \"./css/app.scss\";\nimport SimpleCart from \"./components/simpleCart\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Categories />\n      <Products />\n      <SimpleCart />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","let initialState = {\n  products: [\n    {\n      name: \"Apple\",\n      category: \"Food\",\n      description: \"Fuji\",\n      price: \"$1\",\n      inventory: 1000000,\n    },\n    {\n      name: \"Shirt\",\n      category: \"Clothes\",\n      description: \"RuneScape logo\",\n      price: \"$10\",\n      inventory: 10,\n    },\n    {\n      name: \"Star Realms\",\n      category: \"Games\",\n      description: \"Deck building game\",\n      price: \"$10\",\n      inventory: 0,\n    },\n    {\n      name: \"Pineapple\",\n      category: \"Food\",\n      description: \"pokey\",\n      price: \"$3\",\n      inventory: 1000,\n    },\n  ],\n  activeProducts: [],\n};\n\n// a reducer is a pure function that is meant to eval an action type\nconst categoryReducer = (state = initialState, action) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case \"ACTIVATE_CATEGORY\":\n      const filteredProducts = state.products.filter(\n        (product) => product.category === payload\n      );\n      return { ...state, activeProducts: filteredProducts };\n    case \"ADD_TO_CART\":\n      state.products.map((item) => {\n        if (item === payload) {\n          item.inventory--;\n        }\n        return item;\n      });\n      return state;\n    case \"REMOVE_FROM_CART\":\n      state.products.map((item) => {\n        if (item === payload) {\n          item.inventory++;\n        }\n        return item;\n      });\n      return state;\n    default:\n      return state;\n  }\n};\n\n// an action creator is a function that RETURNS an ACTION\nexport const activate = (category) => {\n  // action is an object literal with a type and a payload (optional)\n  return {\n    type: \"ACTIVATE_CATEGORY\",\n    payload: category,\n  };\n};\n\nexport default categoryReducer;\n","import { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport categoryReducer from \"./reducers/categoryReducer\";\nimport productReducer from \"./reducers/productReducer\";\nimport shoppingCart from \"./reducers/shoppingCart\";\n\nlet reducers = combineReducers({\n  categoryReducer,\n  productReducer,\n  shoppingCart,\n});\n\nconst store = () => {\n  return createStore(reducers, composeWithDevTools());\n};\n\nconsole.log(\"_REDUX_STORE_\", store());\n\nexport default store();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./reduxStore/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}