{"version":3,"sources":["components/header.js","components/footer.js","reduxStore/reducers/categoryReducer.js","components/categories.js","components/products.js","App.js","reduxStore/reducers/productReducer.js","reduxStore/index.js","index.js"],"names":["Header","Footer","href","initialState","categories","name","displayName","description","activeCategory","categoryReducer","state","action","type","payload","mapDispatchToProps","activate","category","connect","props","console","log","map","idx","onClick","products","productReducer","item","inventory","App","className","exact","path","price","filteredProducts","filter","product","reducers","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"6JAIeA,MAJf,WACE,OAAO,sD,QCgBMC,MAff,WACE,OACE,2CACe,OACb,mBAAGC,KAAK,4BAAR,SACE,cAAC,IAAD,MAED,OACD,mBAAGA,KAAK,wDAAR,SACE,cAAC,IAAD,U,OCXJC,EAAe,CACjBC,WAAY,CACV,CACEC,KAAM,OACNC,YAAa,QACbC,YAAa,qBAEf,CACEF,KAAM,UACNC,YAAa,WACbC,YAAa,mBAEf,CACEF,KAAM,QACNC,YAAa,gBACbC,YAAa,gDAGjBC,eAAgB,QAyBHC,EArBS,WAAmC,IAAlCC,EAAiC,uDAAzBP,EAAcQ,EAAW,uCAClDC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEZ,MACO,sBADCD,GAEJF,EAAMF,eAAiBK,EAChBH,GAEAA,GCXb,IAIMI,EAAqB,CAAEC,SDYL,SAACC,GAEvB,MAAO,CACLJ,KAAM,oBACNC,QAASG,KCdEC,eANS,SAACP,GAAD,MAAY,CAClCN,WAAYM,EAAMD,mBAKoBK,EAAzBG,EAtBf,SAAoBC,GAElB,OADAC,QAAQC,IAAI,aAAcF,EAAMd,YAE9B,oCACE,oDACA,8BACGc,EAAMd,WAAWA,WAAWiB,KAAI,SAACL,EAAUM,GAAX,OAC/B,sBAAMC,QAAS,kBAAML,EAAMH,SAASC,EAASX,OAA7C,SACGW,EAASX,MAD6CiB,cCQnE,IAKeL,eALS,SAACP,GAAD,MAAY,CAClCc,SAAUd,EAAMe,eAChBT,SAAUN,EAAMD,mBAGHQ,EArBf,SAAkBC,GAEhB,OADAC,QAAQC,IAAI,WAAYF,EAAMM,UAE5B,oCACE,+BAAKN,EAAMF,SAASR,eAApB,OACA,8BACGU,EAAMM,SAASA,SAASH,KAAI,SAACK,GAAD,OAC3B,gCACGA,EAAKrB,KADR,KACgBqB,EAAKnB,YADrB,KACoCmB,EAAKC,YAD/BD,EAAKrB,iB,eCHnBD,EAAa,CAAC,OAAQ,UAAW,SAqBxBwB,MAnBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,IAAD,UACGzB,EAAWiB,KAAI,SAACL,GAAD,OACd,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAI,WAAMf,GAAvB,SACE,cAAC,EAAD,CAAUA,SAAUA,cAK5B,cAAC,EAAD,Q,gBCtBFb,EAAe,CACjBqB,SAAU,CACR,CACEnB,KAAM,QACNW,SAAU,OACVT,YAAa,OACbyB,MAAO,KACPL,UAAW,KAEb,CACEtB,KAAM,QACNW,SAAU,UACVT,YAAa,iBACbyB,MAAO,MACPL,UAAW,IAEb,CACEtB,KAAM,cACNW,SAAU,QACVT,YAAa,qBACbyB,MAAO,MACPL,UAAW,GAEb,CACEtB,KAAM,YACNW,SAAU,OACVT,YAAa,QACbyB,MAAO,KACPL,UAAW,OA6BFlB,EAvBS,WAAmC,IAAlCC,EAAiC,uDAAzBP,EAAcQ,EAAW,uCAClDC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEZ,GACO,sBADCD,EACN,CACE,IAAMqB,EAAmB9B,EAAaqB,SAASU,QAC7C,SAACC,GAAD,OAAaA,EAAQnB,WAAaH,KAEpC,MAAO,CAAEW,SAAUS,GAEnB,OAAOvB,GCvCT0B,EAAWC,0BAAgB,CAAE5B,kBAAiBgB,mBAE5Ca,EAAQ,WACZ,OAAOC,sBAAYH,EAAUI,kCAG/BrB,QAAQC,IAAI,gBAAiBkB,KAEdA,UCPfG,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.a2cb489f.chunk.js","sourcesContent":["function Header() {\n  return <header>Best Store Ever</header>;\n}\n\nexport default Header;\n","import { BsGithub, BsLinkedin } from \"react-icons/bs\";\n\nfunction Footer() {\n  return (\n    <p>\n      &copy; 2021 {\"    \"}\n      <a href=\"https://github.com/Twin-2\">\n        <BsGithub />\n      </a>\n      {\"    \"}\n      <a href=\"https://www.linkedin.com/in/david-whitmore-501273160/\">\n        <BsLinkedin />\n      </a>\n    </p>\n  );\n}\n\nexport default Footer;\n","let initialState = {\n  categories: [\n    {\n      name: \"Food\",\n      displayName: \"Foods\",\n      description: \"all thingd edible\",\n    },\n    {\n      name: \"Clothes\",\n      displayName: \"Clothing\",\n      description: \"Cover yourself!\",\n    },\n    {\n      name: \"Games\",\n      displayName: \"Fun and Games\",\n      description: \"All types of games for all types of players\",\n    },\n  ],\n  activeCategory: \"Food\",\n};\n\n// a reducer is a pure function that is meant to eval an action type\nconst categoryReducer = (state = initialState, action) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case \"ACTIVATE_CATEGORY\":\n      state.activeCategory = payload;\n      return state;\n    default:\n      return state;\n  }\n};\n\n// an action creator is a function that RETURNS an ACTION\nexport const activate = (category) => {\n  // action is an object literal with a type and a payload (optional)\n  return {\n    type: \"ACTIVATE_CATEGORY\",\n    payload: category,\n  };\n};\n\nexport default categoryReducer;\n","import { connect } from \"react-redux\";\nimport { activate } from \"../reduxStore/reducers/categoryReducer\";\n\nfunction Categories(props) {\n  console.log(\"categories\", props.categories);\n  return (\n    <section>\n      <h1>Product Categories</h1>\n      <nav>\n        {props.categories.categories.map((category, idx) => (\n          <span onClick={() => props.activate(category.name)} key={idx}>\n            {category.name}\n          </span>\n        ))}\n      </nav>\n    </section>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  categories: state.categoryReducer,\n});\n\nconst mapDispatchToProps = { activate };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Categories);\n","import { connect } from \"react-redux\";\n\nfunction Products(props) {\n  console.log(\"products\", props.products);\n  return (\n    <section>\n      <h1>{props.category.activeCategory} </h1>\n      <nav>\n        {props.products.products.map((item) => (\n          <div key={item.name}>\n            {item.name}: {item.description}, {item.inventory}\n          </div>\n        ))}\n      </nav>\n    </section>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  products: state.productReducer,\n  category: state.categoryReducer,\n});\n\nexport default connect(mapStateToProps)(Products);\n","import Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport Categories from \"./components/categories\";\nimport Products from \"./components/products\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst categories = [\"Food\", \"Clothes\", \"Games\"];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Categories />\n        <Switch>\n          {categories.map((category) => (\n            <Route exact path={`/${category}`}>\n              <Products category={category} />\n            </Route>\n          ))}\n        </Switch>\n      </Router>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","let initialState = {\n  products: [\n    {\n      name: \"Apple\",\n      category: \"Food\",\n      description: \"Fuji\",\n      price: \"$1\",\n      inventory: 1000000,\n    },\n    {\n      name: \"Shirt\",\n      category: \"Clothes\",\n      description: \"RuneScape logo\",\n      price: \"$10\",\n      inventory: 10,\n    },\n    {\n      name: \"Star Realms\",\n      category: \"Games\",\n      description: \"Deck building game\",\n      price: \"$10\",\n      inventory: 0,\n    },\n    {\n      name: \"Pineapple\",\n      category: \"Food\",\n      description: \"pokey\",\n      price: \"$3\",\n      inventory: 1000,\n    },\n  ],\n};\n\n// a reducer is a pure function that is meant to eval an action type\nconst categoryReducer = (state = initialState, action) => {\n  let { type, payload } = action;\n\n  switch (type) {\n    case \"ACTIVATE_CATEGORY\":\n      const filteredProducts = initialState.products.filter(\n        (product) => product.category === payload\n      );\n      return { products: filteredProducts };\n    default:\n      return state;\n  }\n};\n\n// an action creator is a function that RETURNS an ACTION\nexport const activate = (category) => {\n  // action is an object literal with a type and a payload (optional)\n  return {\n    type: \"ACTIVATE_CATEGORY\",\n    payload: category,\n  };\n};\n\nexport default categoryReducer;\n","import { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport categoryReducer from \"./reducers/categoryReducer\";\nimport productReducer from \"./reducers/productReducer\";\n\nlet reducers = combineReducers({ categoryReducer, productReducer });\n\nconst store = () => {\n  return createStore(reducers, composeWithDevTools());\n};\n\nconsole.log(\"_REDUX_STORE_\", store());\n\nexport default store();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./reduxStore/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}